name: Build and Publish

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to build and publish'
        required: true
        default: 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.12]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.tag }}
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Add pybind11-stubgen dependency
          pip install pybind11==2.11.0 pybind11-global==2.11.0 wheel setuptools pybind11-stubgen
      
      - name: Configure CMake
        run: cmake -S . -B build -DPYBIND11_PYTHON_VERSION=${{ matrix.python-version }}
      
      - name: Build C++ Extension
        run: cmake --build build --config Release
      
      - name: Install C++ Extension into install/
        run: cmake --install build --prefix install

      # Build the wheel first
      - name: Build Python Wheel
        run: python setup.py bdist_wheel

      # Install the built wheel
      - name: Install built wheel
        run: python -m pip install dist/*.whl

      # Now generate stubs, the module should be found
      - name: Generate Python Stubs
        run: pybind11-stubgen pyorbbecsdk --output-dir=./src/pyorbbecsdk --ignore-all-errors

      - name: Upload platformâ€‘tagged wheel
        uses: actions/upload-artifact@v4
        with:
          name: python-wheel-${{ matrix.os }}-${{ matrix.python-version }}
          path: dist/*.whl

  pypi-publish:
    name: Publish to PyPI
    needs: build
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write

    steps:
      - name: Download all artifacts (all platforms)
        uses: actions/download-artifact@v4
        # no 'name' => download every artifact from this run
        with:
          path: downloaded

      - name: Flatten wheel files into dist/
        run: |
          mkdir dist
          for d in downloaded/*; do
            mv "$d"/*.whl dist/
          done

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
